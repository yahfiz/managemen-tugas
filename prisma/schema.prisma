generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(uuid())
  email     String       @unique
  password  String
  name      String?
  projects  Project[]    @relation("OwnedProjects")
  members   Membership[]
  tasks     Task[]       @relation("AssignedTasks")
  accounts  Account[]
  sessions  Session[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Project {
  id        String       @id @default(uuid())
  name      String
  ownerId   String
  owner     User         @relation("OwnedProjects", fields: [ownerId], references: [id])
  members   Membership[]
  tasks     Task[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Membership {
  id        String       @id @default(uuid())
  userId    String
  projectId String
  user      User         @relation(fields: [userId], references: [id])
  project   Project      @relation(fields: [projectId], references: [id])
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      String     // todo | in-progress | done
  assigneeId  String?
  assignee    User?      @relation("AssignedTasks", fields: [assigneeId], references: [id])
  projectId   String
  project     Project    @relation(fields: [projectId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
